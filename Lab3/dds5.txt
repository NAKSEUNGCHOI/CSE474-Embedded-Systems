/*
 *  University of Washington
 *  ECE 474 Intro to Embedded Systems
 *  Nakseung Choi 1572578 Kejin Li 
 *  Demo3 with DDS.
 */

// 16-bit timer/counter set up for speaker
#define SYSTEM_REG_3A TCCR3A
#define SYSTEM_REG_3B TCCR3B
#define TCNT4_COUNTER TCNT4
#define PRE_SCALE OCR3A
#define SPEAKER_DDRE DDRE
#define SPEAKER_PORTE PORTE

// set up for LEDs
#define LED_DDR DDRL
#define LED_PORT PORTL
#define PIN5 DDL2
#define LED_ON 250
#define LED_OFF 750
#define LED_TOTAL 1000

// durations for LED, tones, sleep, and time counting.
#define LED_DURATION 250
#define N_FLASH 3
#define TONE_DURATION 200
#define SLEEP_DURATION 4000
#define TIME_COUNTING (NTONE * TONE_DURATION) + SLEEP_DURATION

//4-bit Seven Segment display setup
#define PIN13 1 << DDB7 
#define PIN12 1 << DDB6 
#define PIN11 1 << DDB5 
#define PIN10 1 << DDB4
#define PIN22 1 << DDA0 
#define PIN23 1 << DDA1 
#define PIN24 1 << DDA2 
#define PIN25 1 << DDA3
#define PIN26 1 << DDA4 
#define PIN27 1 << DDA5 
#define PIN28 1 << DDA6 
#define PIN29 1 << DDA7

#define DS1 0b1110 << 4
#define DS2 0b1101 << 4
#define DS3 0b1011 << 4
#define DS4 0b0111 << 4
byte seven_seg_counting[10][7] = { { 1,1,1,1,1,1,0 },  // = 0
                                   { 0,1,1,0,0,0,0 },  // = 1
                                   { 1,1,0,1,1,0,1 },  // = 2
                                   { 1,1,1,1,0,0,1 },  // = 3
                                   { 0,1,1,0,0,1,1 },  // = 4
                                   { 1,0,1,1,0,1,1 },  // = 5
                                   { 1,0,1,1,1,1,1 },  // = 6
                                   { 1,1,1,0,0,0,0 },  // = 7
                                   { 1,1,1,1,1,1,1 },  // = 8
                                   { 1,1,1,0,0,1,1 }   // = 9
                                   };

// frequencies for tones
#define NOTE_D4 293
#define NOTE_E4 329
#define NOTE_C4 261
#define NOTE_C3 130
#define NOTE_G3 196
#define NOTE_R 0
#define NTONE 13
int melody[] = { NOTE_D4, NOTE_R, NOTE_E4, NOTE_R, NOTE_C4, NOTE_R, NOTE_C3,
                 NOTE_R, NOTE_G3, NOTE_G3, NOTE_G3, NOTE_G3, NOTE_R };

// number of tasks
#define NTASKS 10
#define ACTUAL_N_TASKS 2
#define TIMING 2

typedef enum{
  READY, 
  RUNNING, 
  SLEEPING,
  DEAD
}STATE;
typedef enum flagState{
  PENDING, 
  DONE
}FLAG;

typedef struct TCB{
  char name[20];
  void (*arg_ptr)();
  int id;
  int n_times;
  int sleepytime;
  int time;
  STATE state;
}tcb;

/* 
 * Function prototypes
*/
void sleep_474(long t);
void schedule_sync();
void copy_tcb(tcb * running, tcb * dead);
void task_self_quit();
void start_task(tcb * task);
void task_load(void * arg_ptr(), const char * name);
tcb * find_dead_task(const char * name);
void set_OC3A_freq(uint32_t freq);
void Task2();
void Task4();
void Task4_1();
void Task4_2();
void speaker_setup();
void seven_segment_setup();
void interrupt_setup();
void DDS_setup();